GOALS of webERP

1. To provide fast, web-based, integrated "best practise" business administration software.

2. To be "low footprint" efficient and fast, with absolutely minimal network traffic.

This is to enable dial up/low band-width connections to work with reasonable
response times. This will require some compromises with the use of graphics/fonts. 

3. Platform independence.

Use of Javascript should be avoided due to the inconsistencies between implimentations. By using only PHP on the server and keeping processing there, anomalies in operation between client's with different software can be avoided. Any use of javascript must have another server based option as a fallback. No significant blocks of javascript to choke dialup connections (see goal 2).

4. Scripts easily readable and modifiable by a business.

PHP code written using control structures in a consistent way throughout. (See style guide)
Well spaced and rigorously indented.
Extensive commenting.
Long descriptive variable names.
There is also an interesting compromise between good programming practise in maximising code reuse through the use of includes, classes and common functions and in the number of separate scripts required to be understood before a developer has enough condidence to consider modifying the script. I believe that too many levels of abstraction can detract from ease of understanding the script. webERP uses a few common include files that must be understood - please do take time to understand the following scripts and use re-use the functions contained therein before creating new functions that do similar things:

includes/ConnectDB.inc   	- database abstraction
includes/session.inc	 	- initiation of session and security checking
includes/header.inc 	 	- page headings and quick menu links
includes/footer.inc	 	- page footer
includes/PDFStarter.php	- PDF report generation substitute for session.inc
includes/DateFunctions.inc	- Date functions
includes/MiscFunctions.inc	- Error reporting function

and config.php which is included by includes/session.inc. Most scripts use all the first 4. Transactional scripts also use an includes/DefineXXXXXXClass.php script. Apart from these files most scripts are otherwise self contained so that a knowledge of these includes and the script should be all thats needed to be confident in modifying the script.

CONTRIBUTIONS

Contributions to the webERP project are encouraged - these simple procedures for doing so are aimed at reducing the confusion and co-ordinating the efforts of all contributors:

1.Join the developers mailing list.

http://lists.sourceforge.net/lists/listinfo/web-erp-developers

Inform the list of your proposed developments and discuss the approach to be used. There are some knowlegable people on the list and they can contribute ideas if you let them. This is also good to avoid overlapping effort or combine efforts in working on different elements of the same project.

2. Obtain the latest development scripts from CVS - see sourceforge instructions for anonymous cvs checkout the CVS files intially then updates daily - this only downloads any modified scripts, or update immediately before commencing any development.


IMPORTANT: Only do development work on the most recent scripts from CVS and update your copy of the CVS regularly. Instructions on the use of CVS at sourceforge can be found at the following URL:

http://sourceforge.net/docman/display_doc.php?docid=14033&group_id=1

3. After any modifications to the scripts - email (only) the modified scripts as based on the code in the latest CVS scripts to info@weberp.org within 12 hours of your last update from CVS. The project admin will have to digest the modifications and ensure the coding style is consistent, test the scripts and consider the implications of the modifications in acheiving the goals noted above. Plenty of narrative explaining the modifications should be posted in the developers list so all can consider the implications. They will be committed to CVS as soon as possible after receipt and testing.

4. Where modifications span 10 or more scripts at the same time, request a stay on development from other developers using the list.

5. All submissions of modifications or additions should be accompanied by a plain text change.log file describing the changes to each script. This explains to everyone the nature of the changes made. Each entry in the change log should state the developer name and date of the  change/addition. This file will be appended to the doc/change.log when the files are committed to CVS.

6. Requests for modification of the database structure - with an extract of the SQL required to effect the changes should be made to info@weberp.org These will be included in the version upgrage script as well as the latest database structure.


CODING STANDARDS

It is very important to ensure that the coding conventions documented here are applied rigorously accross all code in webERP.

Function/Class/Variable Naming

Descriptive names should be used in preference to short variable names:

eg.

$a = 3.14159;

should be avoided in favour of:

$Pi = 3.14159;

The variable $i can be used as a counter.

As displayed above, there should be one space on either side of an equals sign used to assign the return value of a function to a variable. In the case of a block of related assignments, more space may be inserted to promote readability:

$Short         = foo($bar);
$LongVariable = foo($baz);

Good descriptive variable names consisting of several words appended togther should have the first letter of each word capitalised.

eg.
$longvariablename = 1;

should be written as:

$LongVariableName = 1;


HTML

HTML keywords and tags should be in capitals.

eg.
<table><tr><td>Cell 1</td></tr></table>			WRONG!!

<TABLE>
	<TR>
		<TD>Cell 1</TD>
	</TR>
</TABLE>


HTML table cell tags in echo statements should use carriage returns to keep cells together so it is easy to see what is in each cell.

eg.

echo '<TABLE><TR><TD>Label text:</TD><TD>' . $SomeVariable . '</TD><TD>Some Other Label</TD><TD ALIGN=RIGHT>'  . number_format($SomeNumber,2) . '</TD></TR></TABLE>';

Would be more easily digested and should be written as:

echo '<TABLE>
	<TR>
		<TD>' . _('Label text') . ':</TD>
		<TD>' . $SomeVariable . '</TD>
		<TD>' . _('Some Other Label') . ':</TD>
		<TD ALIGN=RIGHT>' . number_format($SomeNumber,2) . '</TD>
	</TR>
      </TABLE>';

Carriage returns should be used in a similar way for printf statements.

HTML colours should be expressed as english readable names rather than the hex 

eg. <FONT COLOR="#FFFFFF">
should be written
<FONT COLOR="white">


Label Strings and Multi-Language

Since webERP is a multi-language system it is important not to compromise this capability by having labels in your scripts that are not enclosed in the gettext function eg.

echo 'Enter the quantity:<INPUT TYPE=TEXT NAME=Quantity>';

should be written as:

echo _('Enter the quantity') . ':<INPUT TYPE=TEXT NAME=Quantity>';

note that there should be no trailing spaces or punctuation on the string to be translated inside the _() function call

PHP Variables

The PHP variable arrays $_POST, $_GET, $_SERVER, $_SESSION provide context about where a variable comes from - many developers are tempted to abbreviate:

$StartingCustomer = $_POST['StartingCustomer'];

or worse:

$s = $_POST['StartingCustomer'];

This should be avoided in favour of using $_POST['StartAtCustomer'] everywhere it is required so the reader can see where the variable comes from.

However, variables which could come from either a $_GET or a $_POST and/or a $_SESSION may be assigned as in the first example since there is no value in the context.

Quotation Marks

Notice that single quotes (') are used in preference to double quotes (") - there is additional overhead for php in parsing data within double quotes. They should only be used where absolutely necessary and concatenation of variables is preferred to having variables inside double quotes.

eg.

echo "Some text with a $Variable";

would be better written as:

echo 'Some text with a ' . $Variable;

to reduce the parsing job required of the web-server.

Arrays and super global arrays should always have the element name within single quotes not doubles

eg.

$_POST["FormVariableName"]

should be written as:

$_POST['FormVariableName']



Control Structures

All control structures (these include if, for, while, switch) must always use statement blocks.
You  are  strongly  encouraged  to  always  use  curly  braces even in situations  where they are technically optional. Having them increases readability  and  decreases  the  likelihood  of  logic errors  being introduced when new lines are added.

eg.
if ($VariableName == true)

	echo "Variable was true";

whilst legal PHP syntax, this should be avoided in favour of the following syntax:

if ($VariableName == true) {

	echo "Variable was true";
}

Parenthesis should open on the same line (after a space) as the initiating control structure and close the statement block at the same level of indenting as the initiating line.

Else statements should be on the same line as the closing statment block from the preceeding elseif or if statement eg.

if ($VariableName == true) {

	echo "Variable was true";

} else {

	echo "Variable was false";

} /*end else $VariableName was false*/

This is the only time there should be anything other than a comment on the closing curly brace line. Comments on a closing curly brace line where the block has been quite a few lines of code are encouraged to show the control structure to which they related.

Whenever a statement block is used code within the block should be one tab indented.

Function defintions should follow the same conventions.

It  is  recommended  that  you  break  lines  at  approximately  75-85 characters.


Spacing

Where readability is improved lines of code should be separated by a line


Comments

C style comment blocks in the format:

/* comments in here */

are preferred. But all comments gratefully received!

All scripts should have a comment in the first few lines with the script revision number in it if the following comment is pasted into it the CVS automatically updates the revision number.

/* $Revision: 1.11 $ */


Messages

The standard message function prnMsg should always be used for all messages to be echo'ed to the screen - this function has two  parameters - the string to display and the message type , 'error', 'warn', 'success', 'info' - there is a third optional paramter which is a prefix heading for the message.

Database Function Calls

There should never be any database specific calls in scripts other than includes/ConnectDB.inc
All database calls should be performed by calling the abstraction functions in that script.


SQL

Should be as ANSI compliant as possible. Table and field names should alway use lower case.

SQL statements should be on several lines for easier reading eg.

$sql = "select transno, trandate, debtortrans.debtorno, branchcode, reference, invtext, order_, rate, ovamount+ovgst+ovfreight+ovdiscount as totalamt, currcode from debtortrans inner join debtorsmaster on debtortrans.debtorno=debtorsmaster.debtorno where ";


is harder to read than:

$sql = "SELECT transno,
		trandate,
		debtortrans.debtorno,
		branchcode, reference,
		invtext,
		order_,
		rate,
		ovamount+ovgst+ovfreight+ovdiscount AS totalamt,
		currcode
	FROM
		debtortrans INNER JOIN debtorsmaster
		ON debtortrans.debtorno=debtorsmaster.debtorno
	WHERE ";


SQL kywords should be capitalised as above eg. SELECT, CASE, FROM, WHERE, GROUP BY, ORDER BY AS INNER JOIN etc.
Line breaks after every comma and on major SQL reserved words as above.



Constants

Constants should always be all-uppercase, with underscores to separate words.


PHP Code Tags

Always use <?php ?> to delimit PHP code, not the <? ?> shorthand. This is the most portable way to include PHP code on differing operating systems and setups.
